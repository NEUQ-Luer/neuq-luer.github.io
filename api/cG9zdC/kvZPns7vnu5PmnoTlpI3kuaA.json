{"title":"体系结构复习","date":"2019-07-27T00:55:35.000Z","thumbnail":"/img/boat.jpg","link":"post/体系结构复习","tags":["复习,出书"],"updated":"2019-07-27T01:01:12.026Z","content":"<h1 id=\"计算机体系结构考点\">计算机体系结构考点<a href=\"post/体系结构复习#计算机体系结构考点\"></a></h1><h2 id=\"计算机系统的多级层次结构（P2）\">计算机系统的多级层次结构（P2）<a href=\"post/体系结构复习#计算机系统的多级层次结构（P2）\"></a></h2><ul>\n<li><p>第6级（虚拟机） 应用语言机器</p>\n</li>\n<li><p>第5级（虚拟机） 高级语言机器</p>\n</li>\n<li><p>第4级（虚拟机） 汇编语言机器</p>\n</li>\n<li><p>第3级（虚拟机） 操作系统机器</p>\n</li>\n<li><p>第2级（物理机） 传统机器语言机器</p>\n</li>\n<li><p>第1级（物理机） 微程序机器</p>\n<h2 id=\"计算机系统结构的经典定义（P3）\"><a href=\"#计算机系统结构的经典定义（P3）\" class=\"headerlink\" title=\"计算机系统结构的经典定义（P3）\"></a>计算机系统结构的经典定义（P3）</h2><p>计算机体系结构的经典定义是1964年Amdahl在介绍IBM360系统时提出的：</p>\n<pre><code>计算机系统结构是指传统机器程序员所看到的计算机属性，即概念性结构与功能特性。</code></pre><h2 id=\"Flynn分类法：SISD，SIMD-MISD-MIMD（P4）\"><a href=\"#Flynn分类法：SISD，SIMD-MISD-MIMD（P4）\" class=\"headerlink\" title=\"Flynn分类法：SISD，SIMD,MISD,MIMD（P4）\"></a>Flynn分类法：SISD，SIMD,MISD,MIMD（P4）</h2><p>Flynn分类法是按照指令流和数据流的多倍性进行分类的。定义如下：</p>\n<pre><code>指令流（Instruction Stream）：计算机执行的指令序列。\n数据流（Data Stream）：由指令流调用的数据序列。\n多倍性（Multiplicity）：在系统最受限的部件上，同时处同一  \n执行阶段的指令或数据的最大数目。</code></pre></li>\n</ul>\n<p>Flynn分类法把计算机系统的结构分为以下四类：</p>\n<pre><code>1. 单指令流单数据流（SISD）；\n2. 单指令流多数据流（SIMD）；\n3. 多指令流单数据流（MISD）；\n4. 多指令流多数据流（MIMD）；</code></pre><p>SISD是传统的顺序处理计算机，SIMD以阵列处理机为代表，MISD只是一种认为的划分，没有实际结构，多处理机属于MIMD。</p>\n<pre><code>在SIMD中，同一控制部件（CU）的控制下，多个处理器部件（PU）同时执行同一条指令所规定的操作，分别对各自的数据进行处理，这些数据来自不同的地方，分别构成各自的数据流。</code></pre><h2 id=\"冯氏分类法：字串位串，字串位并，字并位串，字并位并（P5）\">冯氏分类法：字串位串，字串位并，字并位串，字并位并（P5）<a href=\"post/体系结构复习#冯氏分类法：字串位串，字串位并，字并位串，字并位并（P5）\"></a></h2><p>冯氏分类法是用系统的最大并行度对计算机进行分类的。最大并行度P<sub>m<br></sub>定义为：计算机系统在单位时间内能够处理的最大二进制位数。</p>\n<pre><code>1. 字串位串：n=1,m=1。这是第一代计算机发展初期的纯串行计算机。\n2. 字串位并：n&gt;1,m=1。这是传统的单处理机，同时处理单个字的多个位，如16位，32位等，如IBM370机就属于这种结构。\n3. 字并位串：n=1,m&gt;1。同时处理多个字的同一位（位片）。STARAN，MPP，DAP属于这种结构\n4. 字并位并：n&gt;1,m&gt;1。同时处理多个字的多个位。PEPE，Illiac IV，Cmmp属于这种结构</code></pre><h2 id=\"加速比的计算（P7）\">加速比的计算（P7）<a href=\"post/体系结构复习#加速比的计算（P7）\"></a></h2><p>加速比=系统性能<sub>改进后</sub>/系统性能<sub>改进前</sub>=总执行时间<sub>改进前</sub>/总执行时间<sub>改进后</sub></p>\n<pre><code>Fe：在改进前的系统中，可改进部分的执行时间在总的执行时间中所占的比例，简称可改进比例；\nSe：可改进部件改进以后性能提高的倍数，是改进前所需时间和改进后执行时间的比，简称部件加速比。</code></pre><h2 id=\"CPU性能公式（P9）\">CPU性能公式（P9）<a href=\"post/体系结构复习#CPU性能公式（P9）\"></a></h2><p>CPU的性能公式：<br>CPU时间 = CPU时钟周期数 &times; 时钟周期时间 = &sum;<sup>n</sup><sub>i=1</sub> ( CPI<sub>i</sub>&times;IC<sub>i</sub> )&times;时钟周期时间<br>CPI可表示为：<br>CPI = 时钟周期数/IC = &sum;<sup>n</sup><sub>i=1</sub> ( CPI<sub>i</sub>&times;IC<sub>i</sub>/IC )<br>其中（IC<sub>i</sub>/IC）反应了第i种指令在程序执行过程中所占比例。</p>\n<h2 id=\"程序的局部性原理（P10）\">程序的局部性原理（P10）<a href=\"post/体系结构复习#程序的局部性原理（P10）\"></a></h2><p>程序的局部性原理是人们经常加以利用的程序的属性。</p>\n<pre><code>程序执行时所访问的存储器地址不是随机分布的，而是相对地簇聚。</code></pre><p>现在常用的一个经验规则是：程序执行时间的90%都是在执行程序中的10%的代码。数据访问也有局限性，不过其局部性弱于代码访问的局部性。</p>\n<p>时间局部性：</p>\n<pre><code>程序即将用到的信息很可能就是目前正在使用的信息。</code></pre><p>空间局部性：</p>\n<pre><code>程序即将用到的信息可能与目前正在使用的信息在空间上相邻或者临近。</code></pre><h2 id=\"冯诺依曼结构的五部分组成（P17）\">冯诺依曼结构的五部分组成（P17）<a href=\"post/体系结构复习#冯诺依曼结构的五部分组成（P17）\"></a></h2><pre><code>运算器，控制器，存储器，输入设备和输出设备</code></pre><h2 id=\"系列机的概念（P20）\">系列机的概念（P20）<a href=\"post/体系结构复习#系列机的概念（P20）\"></a></h2><pre><code>系列机是指：由同一厂家生产的具有相同的系统结构，但具有不同组成和实现的一系列不同型号的计算机。</code></pre><h2 id=\"向上-向下-向前-向后兼容（P20）\">向上/向下/向前/向后兼容（P20）<a href=\"post/体系结构复习#向上-向下-向前-向后兼容（P20）\"></a></h2><pre><code>向（上）下兼容：指的是按档计算机编制的程序，不加修改就能运行于比它高（低）档的计算机。\n向后（前）兼容：指的是某个时期投入市场的某种型号的计算机编制的程序，不加修改就能运行于在它之后（前）投入市场的计算机。</code></pre><h2 id=\"模拟方法与仿真方法的区别（P21）\">模拟方法与仿真方法的区别（P21）<a href=\"post/体系结构复习#模拟方法与仿真方法的区别（P21）\"></a></h2><pre><code>仿真和模拟的主要区别在于解释执行所用的语言。\n仿真是用微程序解释执行的，其解释程序存放在控制存储器中；\n模拟是用机器语言程序解释执行的，模拟程序存放在主存中。</code></pre><h2 id=\"并行性的概念（P23）\">并行性的概念（P23）<a href=\"post/体系结构复习#并行性的概念（P23）\"></a></h2><pre><code>并行性是指计算机系统在同一时刻或者同一时间间隔内进行多种运算或操作。\n同时性————两个或两个以上的事件在同一时刻发生\n并发性————两个或两个以上的事件在同一时间间隔内发生</code></pre><h2 id=\"提高并行性的技术途径（P25）\">提高并行性的技术途径（P25）<a href=\"post/体系结构复习#提高并行性的技术途径（P25）\"></a></h2><pre><code>1. 时间重叠：在并行性概念中引入时间因素，让多个处理过程在时间上相互错开，轮流重叠地使用同一套硬件的各个部分，以加快硬件周转而赢得速度。这种途径原则上不要求重复设置硬件设备。流水线技术就是时间重叠的典型实例\n2. 资源重复：在并行性概念中引入空间的因素，以数量取胜。通过重复设置硬件资源，大幅度地提高计算机系统的性能。随着硬件价格的降低，这种途径得到了越来越广泛的应用。可以在单处理机中重复设置多个运算部件或处理部件，也可以重读设置多台处理机，构成多处理机系统。\n3. 资源共享：这是一种软件方法，它使多个任务按一定的时间顺序轮流使用同一套硬件设备。多道程序、分时系统就是遵循这一途径产生的。资源共享即降低成本，又提高了计算机设备的使用率。</code></pre><h2 id=\"对指令系统的基本要求：5个（P35）\">对指令系统的基本要求：5个（P35）<a href=\"post/体系结构复习#对指令系统的基本要求：5个（P35）\"></a></h2><p>对指令系统的基本要求是：</p>\n<pre><code>完整性，规整性，正交性，高效率和兼容性</code></pre><p>完整性：</p>\n<pre><code>是指在一个有限可用的存储空间内，对任何可解的问题，编制计算程序时，指令系统所提供的指令足够使用。完整性要求系统功能齐全，使用方便。</code></pre><p>规整性：</p>\n<pre><code>规整性主要包括对称性和均匀性。对称性是指所有指令系统有关的存储单元的使用、操作码的设置等都是对称的。\n均匀性是指对于各种不同的操作数类型、字长、操作种类和数据存储单元，指令的设置都要同等对待。</code></pre><p>正交性:</p>\n<pre><code>是指在指令中各个不同含义的字段，如操作类型、数据类型、寻址方式字段等，在编码时互不相关，相互独立。</code></pre><p>高效率：</p>\n<pre><code>是指指令的执行速度快、使用频度高。</code></pre><p>兼容性：</p>\n<pre><code>主要是实现向后的兼容性，指令系统可以增加新指令，但不能删除指令或者更改指令的功能。</code></pre><h2 id=\"设计系统时，针对指令集内指令数量与功能的多少所设计的两种截然不同的策略，产生两类不同的计算机系统：CISC和RISC（P36）\">设计系统时，针对指令集内指令数量与功能的多少所设计的两种截然不同的策略，产生两类不同的计算机系统：CISC和RISC（P36）<a href=\"post/体系结构复习#设计系统时，针对指令集内指令数量与功能的多少所设计的两种截然不同的策略，产生两类不同的计算机系统：CISC和RISC（P36）\"></a></h2><pre><code>CISC：复杂指令集计算机，它是增强指令功能，把越来越多的功能交给硬件来实现，指令的数量也越来越多。\nRISC：精简指令集计算机，它是尽可能简化指令系统，不仅指令的条数少，而且指令的功能也比较简单。</code></pre><h2 id=\"霍夫曼编码、扩展码（P37）\">霍夫曼编码、扩展码（P37）<a href=\"post/体系结构复习#霍夫曼编码、扩展码（P37）\"></a></h2><p>赫夫曼压缩的基本思想是：</p>\n<pre><code>当各种事件发生的概率不均等时，可以对发生概率最高的事件用最短的位数（时间）来表示（处理），而对于出现概率较低的事件，则可以采用较长的位数（事件）来表示（处理），从而使总的平均位数（时间）缩短。</code></pre><p>赫夫曼编码可以通过构造赫夫曼树求得。构造赫夫曼树的方法是:</p>\n<pre><code>将各事件按其使用额度从小到大依次排列。每次从中选择两个频度值最小的节点，将其合并成一个新的节点，并把新节点画在所选节点的上面，然后用两条边把新节点分别与那两个节点相连。新节点的频度值是所选两个节点频度值之和。反复执行，直到全部节点结合完毕，形成根节点为止。</code></pre><p>操作码的优化程度可以用信息熵来表示<br><img src=\"/.cf//%E4%BF%A1%E6%81%AF%E7%86%B5.png\" alt></p>\n<h2 id=\"指令的两部分组成（P37）\">指令的两部分组成（P37）<a href=\"post/体系结构复习#指令的两部分组成（P37）\"></a></h2><h2 id=\"流水线的概念（P53）\">流水线的概念（P53）<a href=\"post/体系结构复习#流水线的概念（P53）\"></a></h2><pre><code>在计算机中采用流水线，把一个重复的过程分解为若干个子过程，每个子过程由专门的功能部件来实现。把多个处理过程在时间上错开，依次通过各功能段，这样，每个子过程就可以与其他子过程并行进行。\n流水线中的每个子过程及其功能称为流水线的级或段，段与段相互连接形成流水线。\n流水线的段数称为流水线的深度。</code></pre><p>流水线的特点：</p>\n<pre><code>1. 流水线把一个处理过程分解为若干个子过程，每个子过程由一个专门的功能部件来实现。因此，流水线实际上是把一个大的处理功能部件分解为多个独立的功能部件，并依次靠他们的并行工作来提高处理速度（吞吐率）。\n2. 流水线中各段的时间尽可能相等，否则将引起流水线堵塞断流，因为时间最长的段将成为流水线的瓶颈，此时流水线中的其他功能部件就不能充分发挥作用。因此瓶颈问题是流水线设计必须解决的。\n3. 流水线每一个段的后面都要有一个缓冲寄存器（锁存器），称为流水寄存器。其作用是在相邻的两端之间传送数据，以提供后面流水段要用到的信息。其另一个作用是隔离各段的处理工作，避免相邻流水段电路相互打扰。\n4. 流水技术适合于大量重复的时序过程，只有在输入输出端不断提供任务，才能充分发挥流水线的效率。\n5. 流水线需要有通过时间和排空时间。他们分别是指第一个任务和最后一个任务从进入流水线到流出结果的那个时间段里。在这两个时间段中，流水线都不是满负荷的。经过”通过时间后“，流水线进入满载工作状态，整条流水线的效率才能得到充分发挥。</code></pre><h2 id=\"流水线的吞吐率：各段相等（P58），各段不完全相等（P59）\">流水线的吞吐率：各段相等（P58），各段不完全相等（P59）<a href=\"post/体系结构复习#流水线的吞吐率：各段相等（P58），各段不完全相等（P59）\"></a></h2><p>吞吐率：</p>\n<pre><code>指令条数/流水线时间\n（单位时间内流水线所完成的任务数量）</code></pre><p>段数为k，连续输入n个任务。第一个任务输入后，经过kΔt的时间从输出端流出。此后n-1个Δt中，每Δt时间一个任务。</p>\n<h5 id=\"各段时间均相等的流水线：\">各段时间均相等的流水线：<a href=\"post/体系结构复习#各段时间均相等的流水线：\"></a></h5><p>流水线实际吞吐率</p>\n<pre><code>TP = n/[(k+n-1)Δt]</code></pre><p>最大吞吐率为：</p>\n<pre><code>TPmax = lim(n-&gt;∞) n/[(k+n-1)Δt]=1/Δt</code></pre><p>最大吞吐率与实际吞吐率的关系：</p>\n<pre><code>TP = [n/(k+n-1) ]TPmax</code></pre><h5 id=\"各段时间不完全相等的流水线：\">各段时间不完全相等的流水线：<a href=\"post/体系结构复习#各段时间不完全相等的流水线：\"></a></h5><p>实际吞吐率：<br>TP = n/[&sum;<sup>k</sup><sub>i=1</sub>&Delta;t<sub>i</sub>+(n-1)max(&Delta;t<sub>1</sub>,&Delta;t<sub>2</sub>,……&Delta;t<sub>k</sub>)]<br>最大吞吐率：<br>TPmax = 1/[max(&Delta;t<sub>1</sub>,&Delta;t<sub>2</sub>,…,&Delta;t<sub>k</sub>)]</p>\n<h2 id=\"消除瓶颈段的方法：细分瓶颈段，重复设置瓶颈段（P59-60）\">消除瓶颈段的方法：细分瓶颈段，重复设置瓶颈段（P59-60）<a href=\"post/体系结构复习#消除瓶颈段的方法：细分瓶颈段，重复设置瓶颈段（P59-60）\"></a></h2><p>可以用以下两种方法来消除瓶颈段：</p>\n<ol>\n<li><p>细分瓶颈段：</p>\n<pre><code>该方法将流水线中的瓶颈段切分为几个独立的功能段，从而使流水线各段的处理时间都相等。</code></pre></li>\n<li><p>重复设置瓶颈段：</p>\n<pre><code>如果无法把瓶颈段再次细分，就可以采用重复设置瓶颈段的方法来解决问题。重复设置的段并行工作，在时间上依次错开处理任务。这方法的缺点是控制逻辑复杂，所需要的硬件也增加了。</code></pre><h2 id=\"流水线的加速比（P60-61）\"><a href=\"#流水线的加速比（P60-61）\" class=\"headerlink\" title=\"流水线的加速比（P60-61）\"></a>流水线的加速比（P60-61）</h2></li>\n</ol>\n<p>流水线的加速比是指使用顺序处理方式处理一批任务所用的时间与流水线使用流水处理方式处理同一批任务所用的时间之比。<br>设顺序执行所用时间是Ts，按流水线方式处理所用的时间是Tk，则流水线的加速比：</p>\n<pre><code>S = Ts/Tk</code></pre><p>假设流水线各段时间都是&Delta;t则一条k段流水线完成n个连续任务所需要的时间为Tk = (k+n-1)&Delta;t。这n个任务若是顺序执行，则所需要的时间为Ts = nk&Delta;t 代入得实际加速比:</p>\n<pre><code>S = nk/(k+n-1)</code></pre><p>最大加速比：</p>\n<pre><code>Smax = lim(n-&gt;∞) nk/(k+n-1) = k</code></pre><p>当各段不相等时：<br>S = n&sum;<sup>k</sup><sub>i=1</sub>&Delta;t<sub>i</sub>/[&sum;<sup>k</sup><sub>i=1</sub>max(&Delta;t<sub>1</sub>,&Delta;t<sub>2</sub>,…,&Delta;t<sub>k</sub>)]</p>\n<h2 id=\"流水线的瓶颈是各段中时间最大的段（P64）；\">流水线的瓶颈是各段中时间最大的段（P64）；<a href=\"post/体系结构复习#流水线的瓶颈是各段中时间最大的段（P64）；\"></a></h2><h2 id=\"单功能非线性流水线的最优调度（P65-67）\">单功能非线性流水线的最优调度（P65-67）<a href=\"post/体系结构复习#单功能非线性流水线的最优调度（P65-67）\"></a></h2><h2 id=\"经典的五段流水线内容（P70）\">经典的五段流水线内容（P70）<a href=\"post/体系结构复习#经典的五段流水线内容（P70）\"></a></h2><ol>\n<li>取指令周期（IF）<br>以程序计数器（PC）中的内容作为地址，从存储器中取出指令并放入指令寄存器（IR）；同时PC值增加4（假设每条指令占4个字节），指向顺序的下一条指令。</li>\n<li>指令译码/读寄存器周期（ID）<br>对指令进行译码，并用IR中的寄存器地址去访问通用寄存器组，读出所需的操作数。</li>\n<li>执行/有效地址计算周期（EX）<br>在这个周期，ALU对在上一个周期准备好的操作数进行运算或者处理。不同指令进行的操作不同。  <ol>\n<li>load和store指令：ALU把指令中所指定的寄存器的内容与偏移量相加，形成访存有效地址。</li>\n<li>寄存器-寄存器 ALU指令：ALU按照操作码指定的操作对从通用寄存器组中读出的数据进行运算。</li>\n<li>寄存器-立即数 ALU指令：ALU按照操作码指定的操作对从通用寄存器组中读出的操作数和指令中给出的立即数进行运算。</li>\n<li>分支指令：ALU把指令中给出的偏移量与PC值相加，形成转移目标的地址。同时，对前一个周期读出的操作数进行判断，确定分支是否成功。</li>\n</ol>\n</li>\n<li>存储器访问/分支完成周期（MEM）  <ol>\n<li>load指令和store指令：如果是load指令就用上一个周期计算出的有效地址从存储器中读出相应的数据；如果是store指令，就把指定的数据写入这个有效地址所给出的存储器单元。</li>\n<li>分支指令：如果分支“成功”,就把在前一个周期中计算好的转移目标地址送给PC，分支指令执行完成；否则，就不进行任何操作。</li>\n<li>其他类型的指令在此周期不做任何操作</li>\n</ol>\n</li>\n<li>写回周期（WB）<br>把结果写入通用寄存器组。对于ALU运算指令来说，这个结果来自ALU，而对于load指令来说，这个结果来自于存储器。</li>\n</ol>\n<h2 id=\"相关的三种类型：数据相关，名相关，控制相关（P73）\">相关的三种类型：数据相关，名相关，控制相关（P73）<a href=\"post/体系结构复习#相关的三种类型：数据相关，名相关，控制相关（P73）\"></a></h2><h2 id=\"流水线的三种冲突类型：结构冲突，数据冲突，控制冲突（P74）\">流水线的三种冲突类型：结构冲突，数据冲突，控制冲突（P74）<a href=\"post/体系结构复习#流水线的三种冲突类型：结构冲突，数据冲突，控制冲突（P74）\"></a></h2><h2 id=\"命中率与不命中率的计算（P191）\">命中率与不命中率的计算（P191）<a href=\"post/体系结构复习#命中率与不命中率的计算（P191）\"></a></h2><h2 id=\"表7-1，-“Cache-主存”和“主存-辅存”层次的对比（P193）\">表7.1， “Cache-主存”和“主存-辅存”层次的对比（P193）<a href=\"post/体系结构复习#表7-1，-“Cache-主存”和“主存-辅存”层次的对比（P193）\"></a></h2><h2 id=\"把一个块从主存调入Cache时，常用的映像规则：全相联映像，直接映像，组相联映像（P194）\">把一个块从主存调入Cache时，常用的映像规则：全相联映像，直接映像，组相联映像（P194）<a href=\"post/体系结构复习#把一个块从主存调入Cache时，常用的映像规则：全相联映像，直接映像，组相联映像（P194）\"></a></h2><h2 id=\"当一个块从主存调入Cache时，Cache中没有空闲的块，则主要的替换算法（P200）\">当一个块从主存调入Cache时，Cache中没有空闲的块，则主要的替换算法（P200）<a href=\"post/体系结构复习#当一个块从主存调入Cache时，Cache中没有空闲的块，则主要的替换算法（P200）\"></a></h2><h2 id=\"常用的写策略：写直达，写回法（P203）\">常用的写策略：写直达，写回法（P203）<a href=\"post/体系结构复习#常用的写策略：写直达，写回法（P203）\"></a></h2><h2 id=\"Cache性能分析（P204）\">Cache性能分析（P204）<a href=\"post/体系结构复习#Cache性能分析（P204）\"></a></h2><h2 id=\"MTTF的计算（P244）\">MTTF的计算（P244）<a href=\"post/体系结构复习#MTTF的计算（P244）\"></a></h2><h2 id=\"几种RAID的区别（P246）\">几种RAID的区别（P246）<a href=\"post/体系结构复习#几种RAID的区别（P246）\"></a></h2>","next":{"title":"裱物师","link":"post/裱物师"},"plink":"http://luer.cf/post/体系结构复习/","toc":[{"title":"计算机体系结构考点","id":"计算机体系结构考点","index":"1","children":[{"title":"计算机系统的多级层次结构（P2）","id":"计算机系统的多级层次结构（P2）","index":"1.1"},{"title":"","id":"计算机系统结构的经典定义（P3）","index":"1.2"},{"title":"","id":"Flynn分类法：SISD，SIMD-MISD-MIMD（P4）","index":"1.3"},{"title":"冯氏分类法：字串位串，字串位并，字并位串，字并位并（P5）","id":"冯氏分类法：字串位串，字串位并，字并位串，字并位并（P5）","index":"1.4"},{"title":"加速比的计算（P7）","id":"加速比的计算（P7）","index":"1.5"},{"title":"CPU性能公式（P9）","id":"CPU性能公式（P9）","index":"1.6"},{"title":"程序的局部性原理（P10）","id":"程序的局部性原理（P10）","index":"1.7"},{"title":"向上/向下/向前/向后兼容（P20）","id":"向上-向下-向前-向后兼容（P20）","index":"1.8"},{"title":"模拟方法与仿真方法的区别（P21）","id":"模拟方法与仿真方法的区别（P21）","index":"1.9"},{"title":"并行性的概念（P23）","id":"并行性的概念（P23）","index":"1.10"},{"title":"提高并行性的技术途径（P25）","id":"提高并行性的技术途径（P25）","index":"1.11"},{"title":"对指令系统的基本要求：5个（P35）","id":"对指令系统的基本要求：5个（P35）","index":"1.12"},{"title":"设计系统时，针对指令集内指令数量与功能的多少所设计的两种截然不同的策略，产生两类不同的计算机系统：CISC和RISC（P36）","id":"设计系统时，针对指令集内指令数量与功能的多少所设计的两种截然不同的策略，产生两类不同的计算机系统：CISC和RISC（P36）","index":"1.13"},{"title":"霍夫曼编码、扩展码（P37）","id":"霍夫曼编码、扩展码（P37）","index":"1.14"},{"title":"流水线的概念（P53）","id":"流水线的概念（P53）","index":"1.15"},{"title":"流水线的吞吐率：各段相等（P58），各段不完全相等（P59）","id":"流水线的吞吐率：各段相等（P58），各段不完全相等（P59）","index":"1.16"},{"title":"消除瓶颈段的方法：细分瓶颈段，重复设置瓶颈段（P59-60）","id":"消除瓶颈段的方法：细分瓶颈段，重复设置瓶颈段（P59-60）","index":"1.17"},{"title":"","id":"流水线的加速比（P60-61）","index":"1.18"},{"title":"经典的五段流水线内容（P70）","id":"经典的五段流水线内容（P70）","index":"1.19"},{"title":"几种RAID的区别（P246）","id":"几种RAID的区别（P246）","index":"1.20"}]}]}