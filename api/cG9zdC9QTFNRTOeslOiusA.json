{"title":"PLSQL笔记","date":"2019-07-17T02:09:31.000Z","thumbnail":"/img//img/BingPaper1.jpgundefined","link":"post/PLSQL笔记","tags":["笔记"],"updated":"2019-07-27T02:11:14.109Z","content":"<h1 id=\"HAND-PLSQL-培训笔记\">HAND PLSQL 培训笔记<a href=\"post/PLSQL笔记#HAND-PLSQL-培训笔记\"></a></h1><h2 id=\"概览\">概览<a href=\"post/PLSQL笔记#概览\"></a></h2><p>PLSQL是ORACLE在SQL基础上进行扩展而成的一种过程语言。PLSQL提供了典型的高级语言特性，如封装，例外处理，信息隐藏，面向对象等；PLSQL使用SQL来处理数据，使用控制结构来处理业务逻辑。  除此之外，PLSQL也可用在ORACLE的Form和Report中。  PLSQL通过减少来回交互以减轻网路流量的压力，节省时间。</p>\n<h2 id=\"PLSQL中的块\">PLSQL中的块<a href=\"post/PLSQL笔记#PLSQL中的块\"></a></h2><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Declare</span><br><span class=\"line\">--声明变量</span><br><span class=\"line\">begin</span><br><span class=\"line\">--一个块</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></div></figure>\n\n<p>块结构的关键字后面不需要跟分号，END后面需要带分号<br>PLSQL的块包括三种，匿名块Anonymous，存储过程Procedure，函数Function<br>匿名块Anonymous：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE</span><br><span class=\"line\"></span><br><span class=\"line\">BEGIN</span><br><span class=\"line\"></span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>存储过程Procedure：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Procedure [Name(传入变量)] IS</span><br><span class=\"line\">[过程用到的变量声明]</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">[EXCEPTION]</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>函数Funciton</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FUNCTION [name（传入变量）]</span><br><span class=\"line\">RETURN [DataType]</span><br><span class=\"line\">IS [变量声明]</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">RETURN [value];</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"PLSQL的变量类型：\">PLSQL的变量类型：<a href=\"post/PLSQL笔记#PLSQL的变量类型：\"></a></h3><ol>\n<li>系统内置的常规简单变量类型：比如大多数数据库表的字段类型都可以作为变量类型；</li>\n<li>用户自定义复杂变量类型：比如记录类型；</li>\n<li>引用类型：保存了一个指针值；</li>\n<li>大对象类型（LOB）：保存了一个指向大对象的地址<br>举例：  </li>\n<li>布尔类型 TURE BOOLEAN</li>\n<li>数值类型 2134234 NUMBER</li>\n<li>日期类型 25-JAN-01 DATE</li>\n<li>字符串类型 Luer VARCHAR<h3 id=\"PLSQL的变量声明\"><a href=\"#PLSQL的变量声明\" class=\"headerlink\" title=\"PLSQL的变量声明\"></a>PLSQL的变量声明</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLEAR</span><br><span class=\"line\">V_HIREDATE DATE;</span><br><span class=\"line\">V_DEPTNO NUMBER NOT NULL := 10;</span><br><span class=\"line\">V_LOCATION VARCHAR := &apos;LUER&apos;</span><br><span class=\"line\">C_COMM CONSTANT NUMBER := 1400 ;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>说明：  </p>\n<ol>\n<li>变量命名遵循通用规则，比如V_NAME表示一个变量，C_NAME表示一个常量；</li>\n<li>一般建议每一行声明一个变量；</li>\n<li>如果声明了变量但是并未进行初始化，那么在初始化之前变量值为NULL，建议每个变量都进行初始化赋值;</li>\n<li>在同一个块中，避免出现和数据库表中字段名相同的变量<br>常规类型的变量声明举例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE</span><br><span class=\"line\">v_job VARCHAR(9);</span><br><span class=\"line\">v_count BINARY_INTERGER := 0;</span><br><span class=\"line\">v_total_sal NUMBER(9,2):=0;</span><br><span class=\"line\">v_orderdate DATE:= SYSDATE + 8;</span><br><span class=\"line\">v_tax_rate CONSTANT NUMBER(3,2) := 8.25;</span><br><span class=\"line\">v_valid BOOLEAN NOT NULL:=TRUE;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>PLSQL通过%TYPE属性来声明与xx类型一致的变量类型</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v_name employees.last_name%TYPE;</span><br><span class=\"line\">v_min_balance v_balance%TYPE := 10;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"可绑定变量\">可绑定变量<a href=\"post/PLSQL笔记#可绑定变量\"></a></h3><p>可绑定变量是一种在宿主环境中定义的变量，所谓宿主环境一般是指SQLPLUS环境或者PLSQL DEVELOPER环境，可绑定变量可用于在运行时把值传递给PLSQL，创建语法；标准的PLSQL中定义变量使用‘：’加以区分。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VARIABLE g_salary NUMBER</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    SELECT salary</span><br><span class=\"line\">    INTO :g_salary</span><br><span class=\"line\">    FROM employees</span><br><span class=\"line\">    WHERE employee_id = 178;</span><br><span class=\"line\">END;</span><br><span class=\"line\">/</span><br><span class=\"line\">PRINT g_salary</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"DBMS-OUTPUT-PUT-LINE\">DBMS_OUTPUT.PUT_LINE()<a href=\"post/PLSQL笔记#DBMS-OUTPUT-PUT-LINE\"></a></h3><p>PLSQL中使用调试程序输出中间变量的值</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE</span><br><span class=\"line\">    v_sal NUMBER := &amp;p_annual_sal;--输入</span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(&apos;The Monthly Salary is&apos;||TO_CHAR(v_sal));</span><br><span class=\"line\"></span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"SQL函数在PLSQL的过程语句中的使用\">SQL函数在PLSQL的过程语句中的使用<a href=\"post/PLSQL笔记#SQL函数在PLSQL的过程语句中的使用\"></a></h3><p>大多数的SQL函数都可以在PLSQL中使用，比如：<br>单行的数值和字符串函数、数据类型转换函数、日期函数、时间函数、求最大、最小值的GREATEST，LEAST函数等<br>但有些函数是不能在PLSQL使用的，比如：<br>DECODE函数、分组函数（AVG，MIN，MAX，COUNT，SUN，STDDEV，VARAIANCE）等  </p>\n<h3 id=\"块嵌套和变量范围\">块嵌套和变量范围<a href=\"post/PLSQL笔记#块嵌套和变量范围\"></a></h3><p>PLSQL的块可以嵌套，作用范围和其他语言类似  </p>\n<h3 id=\"变量限定词\">变量限定词<a href=\"post/PLSQL笔记#变量限定词\"></a></h3><p>如果块的内层和外层有相同的变量声明，而内层的程序要访问外层变量，那么就使用块限定词：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;outer&gt;&gt;</span><br><span class=\"line\">DECLARE</span><br><span class=\"line\">    birthdate DATE;</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    DECLATRE</span><br><span class=\"line\">        birthdate DATE;</span><br><span class=\"line\">    BEGIN</span><br><span class=\"line\">    ---</span><br><span class=\"line\">    outer.birthdate :=TO_DATE(&apos;03-AUG-1976&apos;,&apos;DD-MON-YYYY&apos;);</span><br><span class=\"line\">    END;</span><br><span class=\"line\">---</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"PLSQL中的SQL语句\">PLSQL中的SQL语句<a href=\"post/PLSQL笔记#PLSQL中的SQL语句\"></a></h3><h4 id=\"SELECT-INTO-用于把从数据库查出的数据存入变量\">SELECT INTO 用于把从数据库查出的数据存入变量<a href=\"post/PLSQL笔记#SELECT-INTO-用于把从数据库查出的数据存入变量\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE</span><br><span class=\"line\">    v_hire_date employees.hire_date%TYPE;</span><br><span class=\"line\">    v_salary employee.salary%TYPE</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    SELECT hire_date , salary</span><br><span class=\"line\">    INTO v_hire_date , v_salary</span><br><span class=\"line\">    FROM employee</span><br><span class=\"line\">    WHERE employee_id = 100;</span><br><span class=\"line\">    ---</span><br><span class=\"line\"></span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>注意：仅支持单行查询结果，多行数据会引发TOO_MANY_ROWS的例外<br>INSERT、UPDATE、DELETE、MERGE等可以在SQL语句中使用PLSQL声明的变量</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">    INSERT INTO employees</span><br><span class=\"line\">    (employee_id , first_name, last_name,emaol,hire_date,job_id,salary)</span><br><span class=\"line\">    VALUES</span><br><span class=\"line\">    (employees_seq.NEXTVAL , &apos;Ruth&apos;,&apos;Cores&apos;,&apos;RECORES&apos;,sysdate , &apos;AD_ASST&apos;,4000);</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"PLSQL中的控制语句\">PLSQL中的控制语句<a href=\"post/PLSQL笔记#PLSQL中的控制语句\"></a></h3><h4 id=\"判断\">判断<a href=\"post/PLSQL笔记#判断\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IF condidtion THEN</span><br><span class=\"line\">    statements;</span><br><span class=\"line\">    [ELSIF condition THEN</span><br><span class=\"line\">        statements;]</span><br><span class=\"line\">    [ELSE</span><br><span class=\"line\">        statements;]</span><br><span class=\"line\">END IF;</span><br></pre></td></tr></table></div></figure>\n\n<p>注意是ELSIF不是ELSEIF</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CASE selector</span><br><span class=\"line\">    WHEN expression1 THEN result1</span><br><span class=\"line\">    WHEN expression2 THEN result2</span><br><span class=\"line\">    ---</span><br><span class=\"line\">    WHEN expressionN THEN resultN</span><br><span class=\"line\">    [ELSE resultN+1;]</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"循环\">循环<a href=\"post/PLSQL笔记#循环\"></a></h4><p>基本循环</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOOP</span><br><span class=\"line\">    statement1</span><br><span class=\"line\">    ---</span><br><span class=\"line\">    EXIT[WHEN condition];</span><br><span class=\"line\">END LOOP;</span><br></pre></td></tr></table></div></figure>\n\n<p>While循环</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WHILE condition LOOP--达成条件 ， 循环</span><br><span class=\"line\">    statement1;</span><br><span class=\"line\">    statement2;</span><br><span class=\"line\">    ---</span><br><span class=\"line\">END　LOOP;</span><br></pre></td></tr></table></div></figure>\n\n<p>FOR循环</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FOR counter IN [REVERSE]</span><br><span class=\"line\">    lower_bound..upper_bound LOOP</span><br><span class=\"line\">    statement1;</span><br><span class=\"line\">    statement2;</span><br><span class=\"line\">    ---</span><br><span class=\"line\">END LOOP;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"嵌套循环和LABLE\">嵌套循环和LABLE<a href=\"post/PLSQL笔记#嵌套循环和LABLE\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">    &lt;&lt;Outer_loop&gt;&gt;</span><br><span class=\"line\">    LOOP</span><br><span class=\"line\">    v_counter  := v_counter+1;</span><br><span class=\"line\">    EXIT WHEN v_counter&gt;10;</span><br><span class=\"line\">    &lt;&lt;Inner_LOOP&gt;&gt;</span><br><span class=\"line\">    LOOP</span><br><span class=\"line\">    ---</span><br><span class=\"line\">    EXIT Outer_loop WHEN total_done = &apos;YES&apos;;</span><br><span class=\"line\">    --Leave Both LOOPS</span><br><span class=\"line\">    EXIT WHEN inner_done = &apos;YES&apos;;</span><br><span class=\"line\">    ---</span><br><span class=\"line\">    END LOOP Inner_loop;</span><br><span class=\"line\">    END LOOP Outer_loop;</span><br><span class=\"line\">    </span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"PLSQL中的复杂自定义数据类型\">PLSQL中的复杂自定义数据类型<a href=\"post/PLSQL笔记#PLSQL中的复杂自定义数据类型\"></a></h3><p>概述：PLSQL中常用的自定义类型就两种————记录类型那个、PLSQL内存表类型</p>\n<h4 id=\"记录类型\">记录类型<a href=\"post/PLSQL笔记#记录类型\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE type_name IS RECORD</span><br><span class=\"line\">    ------</span><br><span class=\"line\">identifier type_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>举例：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE emp_record_type IS RECORD</span><br><span class=\"line\">    (last_name VARCHAR,</span><br><span class=\"line\">    job_id CARCHAR,</span><br><span class=\"line\">    salary NUMBER,</span><br><span class=\"line\">    emp_record emp_record_type;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"ROWTYPE属性\">%ROWTYPE属性<a href=\"post/PLSQL笔记#ROWTYPE属性\"></a></h4><p>在PLSQL中表示某张表的记录类型，或者是用户指定的记录类型，可以很方便的定义一个变量，其类型与某张表的记录或者自定义的记录类型保持一致</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE</span><br><span class=\"line\">    emp_rec employee%ROWTYPE;</span><br><span class=\"line\"></span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"内存表类型\">内存表类型<a href=\"post/PLSQL笔记#内存表类型\"></a></h4><p>必须包含两部分</p>\n<ol>\n<li>使用BINARY_INTERGER 构成的索引主键</li>\n<li>另外一个简单类型或者用户自定义类型的字段作为具体元素<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE ename_table_type IS TABLE OF employees.last_name%TYPE</span><br><span class=\"line\">    INDEX BY BINARY_INTEGER;</span><br><span class=\"line\">ename_table ename_table_type;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>内存表举例</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE</span><br><span class=\"line\">    TYPE emp_table_type is table of</span><br><span class=\"line\">    employees%ROWTYPE INDEX BY BINARY_INTEGER;</span><br><span class=\"line\">    my_emp_table emp_table_type;</span><br><span class=\"line\">    v_count NUMBER(3):= 104; </span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    FOR i IN 100..v_count</span><br><span class=\"line\">    LOOP</span><br><span class=\"line\">        SELECT * INTO my_emp_table(i) FROM employees</span><br><span class=\"line\">        WHERE employee_id = i;</span><br><span class=\"line\">    END LOOP;</span><br><span class=\"line\">    FOR i IN my_emp_table.FIRST..my_emp_table.LAST</span><br><span class=\"line\">    LOOP</span><br><span class=\"line\">        DBMS_OUTPUT.PUT_LINE(my_emp_table(i).last_name);</span><br><span class=\"line\">    END LOOP;</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"PLSQL中的游标\">PLSQL中的游标<a href=\"post/PLSQL笔记#PLSQL中的游标\"></a></h3><p>类似C++中的迭代器，通过指向来访问数据<br>一般写法</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE</span><br><span class=\"line\">    v_empno employees.employee_id%TYPE;</span><br><span class=\"line\">    v_ename employees.last_name%TYPE;</span><br><span class=\"line\">    CURSOR emp_cursor IS _SELECT employee_id, last_name </span><br><span class=\"line\">    FROM employees;</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    OPEN emp_cursor;</span><br><span class=\"line\">    LOOP FETCH emp_cursor INTO v_empno, v_ename;</span><br><span class=\"line\">    EXIT WHEN emp_cursor%ROWCOUNT &gt; 10 OR </span><br><span class=\"line\">    emp_cursor%NOTFOUND; </span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE (TO_CHAR(v_empno) ||&apos; &apos;|| v_ename);</span><br><span class=\"line\">   END LOOP;</span><br><span class=\"line\">   CLOSE emp_cursor;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></div></figure>\n\n<p>常用写法：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">    FOR emp_record IN (SELECT last_name, department_id</span><br><span class=\"line\">    FROM employees) LOOP</span><br><span class=\"line\"> -- implicit open and implicit fetch occur</span><br><span class=\"line\">    IF emp_record.department_id = 80 THEN</span><br><span class=\"line\"> ...</span><br><span class=\"line\">        ND LOOP; -- implicit close occurs</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>可以通过加参数实现类似分组的效果</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE </span><br><span class=\"line\">    CURSOR emp_cursor (p__deptno NUMBER, p_job VARCHAR2) IS SELECT employee__id, last_name </span><br><span class=\"line\">    FROM employees </span><br><span class=\"line\">    WHERE department_id = p_deptno AND _job_id = p_job</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">    OPEN emp_cursor (80, &apos;SA_REP&apos;); . . . CLOSE emp_cursor</span><br><span class=\"line\">    OPEN emp__cursor (60, &apos;IT_PROG&apos;); . . . </span><br><span class=\"line\">EN</span><br></pre></td></tr></table></div></figure>\n\n<p>使用游标更新或者删除记录时，使用FOR UPDATE NOWAIT语句 锁定相关记录</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT  </span><br><span class=\"line\">FROM </span><br><span class=\"line\">FOR UPDATE [OF columnreference] [NOWAIT]</span><br></pre></td></tr></table></div></figure>","prev":{"title":"Hello Hexo 之 搭建教程","link":"post/Hello-Hexo-之-搭建教程"},"next":{"title":"人工智能笔记","link":"post/人工智能笔记"},"plink":"http://luer.cf/post/PLSQL笔记/","toc":[{"title":"HAND PLSQL 培训笔记","id":"HAND-PLSQL-培训笔记","index":"1","children":[{"title":"概览","id":"概览","index":"1.1"},{"title":"PLSQL中的块","id":"PLSQL中的块","index":"1.2","children":[{"title":"PLSQL的变量类型：","id":"PLSQL的变量类型：","index":"1.2.1"},{"title":"","id":"PLSQL的变量声明","index":"1.2.2"},{"title":"可绑定变量","id":"可绑定变量","index":"1.2.3"},{"title":"DBMS_OUTPUT.PUT_LINE()","id":"DBMS-OUTPUT-PUT-LINE","index":"1.2.4"},{"title":"SQL函数在PLSQL的过程语句中的使用","id":"SQL函数在PLSQL的过程语句中的使用","index":"1.2.5"},{"title":"块嵌套和变量范围","id":"块嵌套和变量范围","index":"1.2.6"},{"title":"变量限定词","id":"变量限定词","index":"1.2.7"},{"title":"PLSQL中的SQL语句","id":"PLSQL中的SQL语句","index":"1.2.8"},{"title":"PLSQL中的控制语句","id":"PLSQL中的控制语句","index":"1.2.9"},{"title":"PLSQL中的复杂自定义数据类型","id":"PLSQL中的复杂自定义数据类型","index":"1.2.10"},{"title":"PLSQL中的游标","id":"PLSQL中的游标","index":"1.2.11"}]}]}]}